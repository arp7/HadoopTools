#!/usr/bin/perl

# Inject blocks into a DataNode storage directory. Works with the 
# BLOCKID_BASED_LAYOUT (layout version -56). See usage for details.
#
#

use strict;
use warnings;

use File::Copy;
use File::Path qw(make_path);
use File::Spec qw(catfile);
use Getopt::Long 2.32;
use Pod::Usage;
use URI::URL;

# Functions -------------------------------------------------------------

sub usage() {
  print qq(
Usage:
  datanode-block-injector --bpid <bpid> --numblocks <num-blocks>
      --block <template-block-file> --meta <template-meta-file>
      [--startblockid <starting-block-id>] [--genstamp <genstamp>]

  The default startblockid is 1000000. The default genstamp is 1000.

  All other parameters are required.

  Template block and meta files can be generated from an existing cluster.
  There is no blocklength parameter as the block length will be the same as
  the size of the template-block-file.
);
  exit(1);
}

# Return the datanode storage directories from HDFS configuration.
#
sub get_datanode_dirs() {
  my $value = qx("$ENV{'HADOOP_HOME'}/bin/hdfs" getconf -confKey dfs.datanode.data.dir 2>/dev/null);
  my @raw_dirs = split(/,/, $value);
  my @dirs;
  foreach my $raw_dir (@raw_dirs) {
    # Remove the storage type.
    $raw_dir =~ s/^\[[a-zA-Z_]+\]//;

    # Convert the URI to a local dir.
    my $url = URI::URL->new($raw_dir);
    my @components = $url->crack();

    # If there is a scheme, it must be 'file'
    if (defined $components[0] && $components[0] ne "file" &&
        $components[0] ne "") {
      die "Bad scheme $components[0] for URI $raw_dir, expected 'file'";
    }
    push(@dirs, $components[5]);
  }
  return @dirs;
}

# Ensure that each storage dir is initialized and its layout version is
# as expected.
# Return the layout version.
# VERSION file parsing snippet copied from http://stackoverflow.com/a/11844903
#
sub verify_storage_dirs($;$) {
  my @storages = @{$_[0]};
  my $bpid = $_[1];
  my %layouts;
  foreach (@storages) {
    my $version_file = get_bp_version_file($_, $bpid);
    open my $fh, '<', $version_file or
        die "Unable to open $version_file file: $!\n";
    print " >> Reading VERSION file $version_file\n";
    my %kvs = map { split /=|\s+/; } <$fh>;
    close $fh;
    (exists $kvs{"layoutVersion"} && $kvs{"layoutVersion"} <= -56) or
        die " >> Layout version not found in $version_file or incorrect.\n";
    $layouts{$kvs{"layoutVersion"}} = 1;
  }

  if (scalar(keys %layouts) != 1) {
    die "Layout version should be the same for all storage directories";
  }

  return (keys %layouts)[0];
}

# Get the layout mask for a specific DataNode layout version.
#
sub get_layout_mask($) {
   if    ($_[0] == -56)    { return 0xff; }
   elsif ($_[0] == -57)    { return 0x1f; }
   else                    { die "Unsupported layout version $_"; }
}

# Given a storage directory root and a block pool ID get the path to
# to the block pool VERSION file.
#
sub get_bp_version_file($;$) {
  my ($storage, $bpid) = @_[0 .. 1];
  return File::Spec->catfile(
      $storage, "current", $bpid, "current", "VERSION");
}

# Given a storage directory root and a block pool ID get the path to
# to the block pool finalized directory.
#
sub get_bp_finalized_dir($;$) {
  my ($storage, $bpid) = @_[0 .. 1];
  return File::Spec->catfile(
      $storage, "current", $bpid, "current", "finalized");
}

sub create_blocks($;$;$;$;$;$;$) {
  my ($finalized, $layout_mask, $num_blocks, $start_blockid, $genstamp,
      $block_template, $meta_template) = @_[0 .. 6];

  print " >> Creating $num_blocks files in $finalized\n";
  for my $blockid ($start_blockid .. ($start_blockid + $num_blocks - 1)) {
    my $blockfile = "blk_" . $blockid;
    my $metafile = $blockfile . "_" . $genstamp . ".meta";

    # Calculate the target directory which is based on the block ID.
    # See DataNodeUtil#idToBlockDir in the HDFS source tree.
    #
    my $subdir1 = "subdir" . (($blockid >> 16) & $layout_mask);
    my $subdir2 =  "subdir" . (($blockid >> 8) & $layout_mask);

    my $target_dir = File::Spec->catfile($finalized, $subdir1, $subdir2);
    make_path($target_dir);
    copy($block_template, File::Spec->catfile($target_dir, $blockfile)) or
        die "Failed to copy $block_template -> $target_dir: $!";
    copy($meta_template, File::Spec->catfile($target_dir, $metafile)) or
        die "Failed to copy $meta_template -> $target_dir: $!";
  }
}


# Main ------------------------------------------------------------------

sub mymain() {
  my $genstamp = 1000;         # Same as CreateEditsLog.
  my $bpid;
  my $num_blocks;
  my $storage_dirs;
  my $block_template;
  my $meta_template;
  my $start_blockid = 1_000_000;
  my $layout_mask;

  GetOptions('bpid=s' => \$bpid,
             'numblocks=i' => \$num_blocks,
             'startblockid=i' => \$start_blockid,
             'genstamp=i' => \$genstamp,
             'storagedirs=s' => \$storage_dirs,
             'block=s' => \$block_template,
             'meta=s' => \$meta_template);

  if (!defined($bpid) || !defined($num_blocks) || !defined($block_template) ||
      !defined($meta_template)) {
    usage();
  }

  if (!defined $ENV{'HADOOP_HOME'}) {
    die "HADOOP_HOME must be defined";
  }

  my @storages = get_datanode_dirs();
  my $blocks_per_storage = int($num_blocks / (scalar @storages));

  $layout_mask = get_layout_mask(verify_storage_dirs(\@storages, $bpid));
  foreach (@storages) {
    create_blocks(get_bp_finalized_dir($_, $bpid), $layout_mask,
        $blocks_per_storage, $start_blockid, $genstamp, $block_template,
        $meta_template);
    $start_blockid += $blocks_per_storage;
  }

  # If $num_blocks is not an exact multiple of the number of storages, create
  # the remainder on the first storage directory.
  #
  my $remaining = $num_blocks % (scalar @storages);
  ($remaining > 0) && create_blocks(get_bp_finalized_dir($storages[0], $bpid),
      $layout_mask, $remaining, $start_blockid, $genstamp, $block_template,
      $meta_template);  
}

# Kick it off! -------------------------------------------------------------
mymain();